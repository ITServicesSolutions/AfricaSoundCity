[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ProchainConcert",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "BadHeaderError",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "activate",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "i18n_patterns",
        "importPath": "django.conf.urls.i18n",
        "description": "django.conf.urls.i18n",
        "isExtraImport": true,
        "detail": "django.conf.urls.i18n",
        "documentation": {}
    },
    {
        "label": "set_language",
        "importPath": "django.conf.urls.i18n",
        "description": "django.conf.urls.i18n",
        "isExtraImport": true,
        "detail": "django.conf.urls.i18n",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "translation",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.serializers",
        "description": "app.serializers",
        "isExtraImport": true,
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "string,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string.",
        "description": "string.",
        "detail": "string.",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "administration.views",
        "description": "administration.views",
        "isExtraImport": true,
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.function",
        "description": "app.function",
        "isExtraImport": true,
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "importPath": "AfricaShows.wsgi",
        "description": "AfricaShows.wsgi",
        "isExtraImport": true,
        "detail": "AfricaShows.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "administration.migrations.0001_initial",
        "description": "administration.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CustomUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "administration.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AdministrationConfig",
        "kind": 6,
        "importPath": "administration.apps",
        "description": "administration.apps",
        "peekOfCode": "class AdministrationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'administration'",
        "detail": "administration.apps",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class UserForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['email_or_phone', 'password', 'hostname', 'is_active', 'is_admin', 'is_artistes', 'is_superuser']\n        widgets = {\n            'password': forms.PasswordInput(),\n        }\nclass ArtistesForm(ModelForm):\n    class Meta:\n        model = Artistes",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ArtistesForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ArtistesForm(ModelForm):\n    class Meta:\n        model = Artistes\n        fields = ['nom', 'biographie', 'image']\nclass CentreForm(ModelForm):\n    class Meta:\n        model = Centre\n        fields = ['nom', 'logo', 'cygle', 'adresse']\nclass ArtisteInviteForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "CentreForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class CentreForm(ModelForm):\n    class Meta:\n        model = Centre\n        fields = ['nom', 'logo', 'cygle', 'adresse']\nclass ArtisteInviteForm(ModelForm):\n    class Meta:\n        model = ArtisteInvite\n        fields = ['nom', 'phone', 'image_artiste']\nclass CategorieArtisteForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ArtisteInviteForm(ModelForm):\n    class Meta:\n        model = ArtisteInvite\n        fields = ['nom', 'phone', 'image_artiste']\nclass CategorieArtisteForm(ModelForm):\n    class Meta:\n        model = CategorieArtiste\n        fields = ['nom_artiste', 'categorie']\nclass TypeDiffusionForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class CategorieArtisteForm(ModelForm):\n    class Meta:\n        model = CategorieArtiste\n        fields = ['nom_artiste', 'categorie']\nclass TypeDiffusionForm(ModelForm):\n    class Meta:\n        model = TypeDiffusion\n        fields = ['nom', 'is_gratuit']\nclass TypeSpectacleForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class TypeDiffusionForm(ModelForm):\n    class Meta:\n        model = TypeDiffusion\n        fields = ['nom', 'is_gratuit']\nclass TypeSpectacleForm(ModelForm):\n    class Meta:\n        model = TypeSpectacle\n        fields = ['type', 'is_valid']\nclass SpectacleForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class TypeSpectacleForm(ModelForm):\n    class Meta:\n        model = TypeSpectacle\n        fields = ['type', 'is_valid']\nclass SpectacleForm(ModelForm):\n    class Meta:\n        model = Spectacle\n        fields = ['type_spectacle', 'nom_spectacle', 'image', 'date', 'lieu', 'description', \n                    'ticket_disponible', 'is_gratuit', 'prix', 'heure_debut', 'heure_fin', 'lien_streaming', 'is_valid']\nclass CodeQRForm(ModelForm):",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "SpectacleForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class SpectacleForm(ModelForm):\n    class Meta:\n        model = Spectacle\n        fields = ['type_spectacle', 'nom_spectacle', 'image', 'date', 'lieu', 'description', \n                    'ticket_disponible', 'is_gratuit', 'prix', 'heure_debut', 'heure_fin', 'lien_streaming', 'is_valid']\nclass CodeQRForm(ModelForm):\n    class Meta:\n        model = CodeQR\n        fields = ['spectacle', 'code_qr', 'token']\nclass AchatForm(ModelForm):",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "CodeQRForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class CodeQRForm(ModelForm):\n    class Meta:\n        model = CodeQR\n        fields = ['spectacle', 'code_qr', 'token']\nclass AchatForm(ModelForm):\n    class Meta:\n        model = Achat\n        fields = ['spectacle', 'user_email', 'quantity', 'montant_total', 'transaction_id', 'statut_paiement']\nclass ProchainConcertForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "AchatForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class AchatForm(ModelForm):\n    class Meta:\n        model = Achat\n        fields = ['spectacle', 'user_email', 'quantity', 'montant_total', 'transaction_id', 'statut_paiement']\nclass ProchainConcertForm(ModelForm):\n    class Meta:\n        model = ProchainConcert\n        fields = ['date', 'spectacle']\nclass CarrouselForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ProchainConcertForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ProchainConcertForm(ModelForm):\n    class Meta:\n        model = ProchainConcert\n        fields = ['date', 'spectacle']\nclass CarrouselForm(ModelForm):\n    class Meta:\n        model = Carrousel\n        fields = ['prochain_concert', 'image_affiche']     \nclass ReservationForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "CarrouselForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class CarrouselForm(ModelForm):\n    class Meta:\n        model = Carrousel\n        fields = ['prochain_concert', 'image_affiche']     \nclass ReservationForm(ModelForm):\n    class Meta:\n        model = Reservation\n        fields = ['nom', 'email', 'spectacle', 'nombre_billets', 'cout_total', 'statut_paiement', 'is_valid']\nclass TypeInstrumentForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ReservationForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ReservationForm(ModelForm):\n    class Meta:\n        model = Reservation\n        fields = ['nom', 'email', 'spectacle', 'nombre_billets', 'cout_total', 'statut_paiement', 'is_valid']\nclass TypeInstrumentForm(ModelForm):\n    class Meta:\n        model = TypeInstrument\n        fields = ['type_instrument']\nclass InstrumentForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class TypeInstrumentForm(ModelForm):\n    class Meta:\n        model = TypeInstrument\n        fields = ['type_instrument']\nclass InstrumentForm(ModelForm):\n    class Meta:\n        model = Instrument\n        fields = ['type_instrument', 'nom_instructeur', 'prenom_instructeur']\nclass NomFormationForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "InstrumentForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class InstrumentForm(ModelForm):\n    class Meta:\n        model = Instrument\n        fields = ['type_instrument', 'nom_instructeur', 'prenom_instructeur']\nclass NomFormationForm(ModelForm):\n    class Meta:\n        model = NomFormation\n        fields = ['nom_formation', 'type_instrument', 'image', 'description', 'prix']\nclass ServiceForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "NomFormationForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class NomFormationForm(ModelForm):\n    class Meta:\n        model = NomFormation\n        fields = ['nom_formation', 'type_instrument', 'image', 'description', 'prix']\nclass ServiceForm(ModelForm):\n    class Meta:\n        model = Service\n        fields = ['nom_formation', 'type_formation', 'instrument', 'date_formation']\nclass TypePaiementForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ServiceForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ServiceForm(ModelForm):\n    class Meta:\n        model = Service\n        fields = ['nom_formation', 'type_formation', 'instrument', 'date_formation']\nclass TypePaiementForm(ModelForm):\n    class Meta:\n        model = TypePaiement\n        fields = ['nom']\nclass RestaurationForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "TypePaiementForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class TypePaiementForm(ModelForm):\n    class Meta:\n        model = TypePaiement\n        fields = ['nom']\nclass RestaurationForm(ModelForm):\n    class Meta:\n        model = Restauration\n        fields = ['menu', 'description', 'image', 'prix']\nclass ComanderMenuForm(ModelForm):\n    class Meta:",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "RestaurationForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class RestaurationForm(ModelForm):\n    class Meta:\n        model = Restauration\n        fields = ['menu', 'description', 'image', 'prix']\nclass ComanderMenuForm(ModelForm):\n    class Meta:\n        model = ComanderMenu\n        fields = ['menu', 'nom', 'prenoms', 'email', 'telephone', 'nombre_commande',\n                  'date_paiement', 'montant', 'is_valid']\n# class PaymentForm(ModelForm):",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ComanderMenuForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ComanderMenuForm(ModelForm):\n    class Meta:\n        model = ComanderMenu\n        fields = ['menu', 'nom', 'prenoms', 'email', 'telephone', 'nombre_commande',\n                  'date_paiement', 'montant', 'is_valid']\n# class PaymentForm(ModelForm):\n#     class Meta:\n#         model = Payment\n#         fields = ['date', 'montant', 'montant_remis', 'relicat']\nclass ReserverFormationForm(ModelForm):",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "ReserverFormationForm",
        "kind": 6,
        "importPath": "administration.forms",
        "description": "administration.forms",
        "peekOfCode": "class ReserverFormationForm(ModelForm):\n    class Meta:\n        model = ReserverFormation\n        fields = ['nom', 'prenom', 'email', 'telephone', 'instrument', 'nombre_de_places', 'montant']",
        "detail": "administration.forms",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "administration.models",
        "description": "administration.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    password_reset_code = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "administration.models",
        "documentation": {}
    },
    {
        "label": "RegisterUserSerializer",
        "kind": 6,
        "importPath": "administration.serializers",
        "description": "administration.serializers",
        "peekOfCode": "class RegisterUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('last_name', 'first_name', 'email_or_phone', 'password', 'is_admin', 'is_artistes')\n        extra_kwargs = {'password': {'write_only': True}}\n    def create(self, validated_data):\n        user = User(\n            last_name=validated_data['last_name'],\n            first_name=validated_data['first_name'],\n            email_or_phone=validated_data['email_or_phone'],",
        "detail": "administration.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "administration.serializers",
        "description": "administration.serializers",
        "peekOfCode": "User = get_user_model()\nclass RegisterUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('last_name', 'first_name', 'email_or_phone', 'password', 'is_admin', 'is_artistes')\n        extra_kwargs = {'password': {'write_only': True}}\n    def create(self, validated_data):\n        user = User(\n            last_name=validated_data['last_name'],\n            first_name=validated_data['first_name'],",
        "detail": "administration.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "administration.urls",
        "description": "administration.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.administration, name='administration'), \n    # path('create_superadmin/', AdminUserCreateAPIView.as_view(), name='create_superadmin'),\n    path('users/', UserList, name='UserList'),\n    path('users/create/', UserCreate, name='UserCreate'),\n    path('users/update/<int:pk>/', UserUpdate, name='UserUpdate'),\n    path('users/delete/<int:pk>/', UserDelete, name='UserDelete'),\n    path('create_superadmin/', page_register, name='create_superadmin'),\n    path('artistes/', ArtistesList, name='ArtistesList'),\n    path('artistes/create/', ArtistesCreate, name='ArtistesCreate'),",
        "detail": "administration.urls",
        "documentation": {}
    },
    {
        "label": "AdminUserCreateAPIView",
        "kind": 6,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "class AdminUserCreateAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/createsuper.html')\n    def post(self, request):\n        email_or_phone = request.POST.get('email_or_phone')\n        password = request.POST.get('password')\n        if not email_or_phone or not password:\n            return render(request, 'administration/createsuper.html', {'error': 'Tous les champs sont obligatoires.'})\n        if User.objects.filter(email_or_phone=email_or_phone).exists():\n            return render(request, 'administration/createsuper.html', {'error': 'Ce nom d\\'utilisateur est déjà pris.'})",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "RegisterUserView",
        "kind": 6,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "class RegisterUserView(CreateAPIView):\n    queryset = User.objects.all()\n    permission_classes = (AllowAny,)\n    serializer_class = RegisterUserSerializer\n    def perform_create(self, serializer):\n        is_admin = self.request.POST.get('is_admin', False)\n        is_artistes = self.request.POST.get('is_artistes', False)\n        user = serializer.save()\n        user.is_admin = is_admin == 'on'\n        user.is_artistes = is_artistes == 'on'",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordAPIView",
        "kind": 6,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "class ResetPasswordAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/pages/request_password.html')\n    def post(self, request):\n        email = request.data.get('email')\n        if not email:\n            return Response({'error': 'L\\'email est obligatoire.'}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ConfirmResetPasswordAPIView",
        "kind": 6,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "class ConfirmResetPasswordAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/pages/confirm_reset_password.html')\n    def post(self, request):\n        email = request.data.get('email')\n        code = request.data.get('code')\n        new_password = request.data.get('new_password')\n        if not email or not code or not new_password:\n            return Response({'error': 'Tous les champs sont obligatoires.'}, status=status.HTTP_400_BAD_REQUEST)\n        try:",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "is_admin",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def is_admin(user):\n    return user.is_superuser\nclass AdminUserCreateAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/createsuper.html')\n    def post(self, request):\n        email_or_phone = request.POST.get('email_or_phone')\n        password = request.POST.get('password')\n        if not email_or_phone or not password:\n            return render(request, 'administration/createsuper.html', {'error': 'Tous les champs sont obligatoires.'})",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def login(request):\n    if request.POST:\n        email_or_phone = request.POST['email_or_phone']\n        password = request.POST['password']\n        user = authenticate(request, email_or_phone=email_or_phone, password=password)\n        if user is not None:\n            login_auth(request, user)\n            return redirect('administration')\n        else:\n            return render(request, 'administration/pages/login.html', {'error_message': \"Nom d'utilisateur ou mot de passe incorrect.\"})",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "request_password",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def request_password(request):\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*().\"\n    length = 10\n    generate_password = \"\".join(random.sample(string, length))\n    return generate_password\nclass ResetPasswordAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/pages/request_password.html')\n    def post(self, request):\n        email = request.data.get('email')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "administration",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def administration(request):\n    context = {\n        'user_count': User.objects.count(),\n        'artistes_count': Artistes.objects.count(),\n        'achat_count': Achat.objects.count(),\n        'centre_count': Centre.objects.count(),\n        'artisteInvite_count': ArtisteInvite.objects.count(),\n        'categorieArtiste_count': CategorieArtiste.objects.count(),\n        'typeDiffusion_count': TypeDiffusion.objects.count(),\n        'typeSpectacle_count': TypeSpectacle.objects.count(),",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "UserList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def UserList(request):\n    users = User.objects.all()\n    context = {'users': users}\n    return render(request, 'administration/pages/User/UserList.html', context)\ndef UserCreate(request):\n    if request.method == 'POST':\n        form = UserForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            user.set_password(form.cleaned_data['password'])",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def UserCreate(request):\n    if request.method == 'POST':\n        form = UserForm(request.POST)\n        if form.is_valid():\n            user = form.save(commit=False)\n            user.set_password(form.cleaned_data['password'])\n            user.save()\n            return redirect('UserList')\n    else:\n        form = UserForm()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def UserUpdate(request, pk):\n    user = get_object_or_404(User, pk=pk)\n    if request.method == 'POST':\n        form = UserForm(request.POST, instance=user)\n        if form.is_valid():\n            user = form.save(commit=False)\n            user.set_password(form.cleaned_data['password'])\n            user.save()\n            return redirect('UserList')\n    else:",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "UserDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def UserDelete(request, pk):\n    user = get_object_or_404(User, pk=pk)\n    if request.method == 'POST':\n        user.delete()\n        return redirect('UserList')\n    return render(request, 'administration/pages/User/UserDelete.html', {'user': user})\n# Vues pour Artistes\ndef ArtistesList(request):\n    artistes = Artistes.objects.all()\n    context = {'artistes': artistes}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtistesList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtistesList(request):\n    artistes = Artistes.objects.all()\n    context = {'artistes': artistes}\n    return render(request, 'administration/pages/Artistes/ArtistesList.html', context)\ndef ArtistesCreate(request):\n    if request.method == 'POST':\n        form = ArtistesForm(request.POST, request.FILES)\n        if form.is_valid():\n            artiste = form.save(commit=False)\n            artiste.user = request.user  # Associe l'utilisateur actuel",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtistesCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtistesCreate(request):\n    if request.method == 'POST':\n        form = ArtistesForm(request.POST, request.FILES)\n        if form.is_valid():\n            artiste = form.save(commit=False)\n            artiste.user = request.user  # Associe l'utilisateur actuel\n            artiste.save()\n            return redirect('ArtistesList')\n    else:\n        form = ArtistesForm()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtistesUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtistesUpdate(request, pk):\n    artistes = get_object_or_404(Artistes, pk=pk)\n    if request.method == 'POST':\n        form = ArtistesForm(request.POST, request.FILES, instance=artistes)\n        if form.is_valid():\n            form.save()\n            return redirect('ArtistesList')\n    else:\n        form = ArtistesForm(instance=artistes)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtistesDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtistesDelete(request, pk):\n    artistes = get_object_or_404(Artistes, pk=pk)\n    if request.method == 'POST':\n        carrousel.delete()\n        return redirect('ArtistesList')\n    context = {'artistes': artistes}\n    return render(request, 'administration/pages/Artistes/ArtistesDelete.html', context)\n# Vues pour le Centre\ndef CentreList(request):\n    centre = Centre.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CentreList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CentreList(request):\n    centre = Centre.objects.all()\n    context = {'centre': centre}\n    return render(request, 'administration/pages/Centre/CentreList.html', context)\ndef CentreCreate(request):\n    if request.method == 'POST':\n        form = CentreForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CentreList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CentreCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CentreCreate(request):\n    if request.method == 'POST':\n        form = CentreForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CentreList')\n    else:\n        form = CentreForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/Centre/CentreCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CentreUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CentreUpdate(request, pk):\n    centre = get_object_or_404(Centre, pk=pk)\n    if request.method == 'POST':\n        form = CentreForm(request.POST, instance=centre)\n        if form.is_valid():\n            form.save()\n            return redirect('CentreList')\n    else:\n        form = CentreForm(instance=centre)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CentreDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CentreDelete(request, pk):\n    centre = get_object_or_404(Centre, pk=pk)\n    if request.method == 'POST':\n        centre.delete()\n        return redirect('CentreList')\n    context = {'centre': centre}\n    return render(request, 'administration/pages/Centre/CentreDelete.html', context)\n# Vue pour les Artistes invites\ndef ArtisteInviteList(request):\n    artisteInvite = ArtisteInvite.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtisteInviteList(request):\n    artisteInvite = ArtisteInvite.objects.all()\n    context = {'artisteInvite': artisteInvite}\n    return render(request, 'administration/pages/ArtisteInvite/ArtisteInviteList.html', context)\ndef ArtisteInviteCreate(request):\n    if request.method == 'POST':\n        form = ArtisteInviteForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ArtisteInviteList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtisteInviteCreate(request):\n    if request.method == 'POST':\n        form = ArtisteInviteForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ArtisteInviteList')\n    else:\n        form = ArtisteInviteForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/ArtisteInvite/ArtisteInviteCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtisteInviteUpdate(request, pk):\n    artisteInvite = get_object_or_404(ArtisteInvite, pk=pk)\n    if request.method == 'POST':\n        form = ArtisteInviteForm(request.POST, instance=artisteInvite)\n        if form.is_valid():\n            form.save()\n            return redirect('ArtisteInviteList')\n    else:\n        form = ArtisteInviteForm(instance=artisteInvite)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ArtisteInviteDelete(request, pk):\n    artisteInvite = get_object_or_404(ArtisteInvite, pk=pk)\n    if request.method == 'POST':\n        artisteInvite.delete()\n        return redirect('ArtisteInviteList')\n    context = {'artisteInvite': artisteInvite}\n    return render(request, 'administration/pages/ArtisteInvite/ArtisteInviteDelete.html', context)\n# Vue pour les Catedories d'artistes \ndef CategorieArtisteList(request):\n    categorieArtiste = CategorieArtiste.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CategorieArtisteList(request):\n    categorieArtiste = CategorieArtiste.objects.all()\n    context = {'categorieArtiste': categorieArtiste}\n    return render(request, 'administration/pages/CategorieArtiste/CategorieArtisteList.html', context)\ndef CategorieArtisteCreate(request):\n    if request.method == 'POST':\n        form = CategorieArtisteForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CategorieArtisteList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CategorieArtisteCreate(request):\n    if request.method == 'POST':\n        form = CategorieArtisteForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CategorieArtisteList')\n    else:\n        form = CategorieArtisteForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/CategorieArtiste/CategorieArtisteCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CategorieArtisteUpdate(request, pk):\n    categorieArtiste = get_object_or_404(CategorieArtiste, pk=pk)\n    if request.method == 'POST':\n        form = CategorieArtisteForm(request.POST, instance=categorieArtiste)\n        if form.is_valid():\n            form.save()\n            return redirect('CategorieArtisteList')\n    else:\n        form = CategorieArtisteForm(instance=categorieArtiste)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CategorieArtisteDelete(request, pk):\n    categorieArtiste = get_object_or_404(CategorieArtiste, pk=pk)\n    if request.method == 'POST':\n        categorieArtiste.delete()\n        return redirect('CategorieArtisteList')\n    context = {'categorieArtiste': categorieArtiste}\n    return render(request, 'administration/pages/CategorieArtiste/CategorieArtisteDelete.html', context)\n# Vue pour les Types de diffussion \ndef TypeDiffusionList(request):\n    typeDiffusion = TypeDiffusion.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeDiffusionList(request):\n    typeDiffusion = TypeDiffusion.objects.all()\n    context = {'typeDiffusion': typeDiffusion}\n    return render(request, 'administration/pages/TypeDiffusion/TypeDiffusionList.html', context)\ndef TypeDiffusionCreate(request):\n    if request.method == 'POST':\n        form = TypeDiffusionForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeDiffusionList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeDiffusionCreate(request):\n    if request.method == 'POST':\n        form = TypeDiffusionForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeDiffusionList')\n    else:\n        form = TypeDiffusionForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/TypeDiffusion/TypeDiffusionCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeDiffusionUpdate(request, pk):\n    typeDiffusion = get_object_or_404(TypeDiffusion, pk=pk)\n    if request.method == 'POST':\n        form = TypeDiffusionForm(request.POST, instance=typeDiffusion)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeDiffusionList')\n    else:\n        form = TypeDiffusionForm(instance=typeDiffusion)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeDiffusionDelete(request, pk):\n    typeDiffusion = get_object_or_404(TypeDiffusion, pk=pk)\n    if request.method == 'POST':\n        typeDiffusion.delete()\n        return redirect('TypeDiffusionList')\n    context = {'typeDiffusion': typeDiffusion}\n    return render(request, 'administration/pages/TypeDiffusion/TypeDiffusionDelete.html', context)\n# Vue pour les Types de spectacle\ndef TypeSpectacleList(request):\n    typeSpectacle = TypeSpectacle.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeSpectacleList(request):\n    typeSpectacle = TypeSpectacle.objects.all()\n    context = {'typeSpectacle': typeSpectacle}\n    return render(request, 'administration/pages/TypeSpectacle/TypeSpectacleList.html', context)\ndef TypeSpectacleCreate(request):\n    if request.method == 'POST':\n        form = TypeSpectacleForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeSpectacleList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeSpectacleCreate(request):\n    if request.method == 'POST':\n        form = TypeSpectacleForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeSpectacleList')\n    else:\n        form = TypeSpectacleForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/TypeSpectacle/TypeSpectacleCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeSpectacleUpdate(request, pk):\n    typeSpectacle = get_object_or_404(TypeSpectacle, pk=pk)\n    if request.method == 'POST':\n        form = TypeSpectacleForm(request.POST, instance=typeSpectacle)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeSpectacleList')\n    else:\n        form = TypeSpectacleForm(instance=typeSpectacle)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeSpectacleDelete(request, pk):\n    typeSpectacle = get_object_or_404(TypeSpectacle, pk=pk)\n    if request.method == 'POST':\n        typeSpectacle.delete()\n        return redirect('TypeSpectacleList')\n    context = {'typeSpectacle': typeSpectacle}\n    return render(request, 'administration/pages/TypeSpectacle/TypeSpectacleDelete.html', context)\n# Vue pour les Spectacles\ndef SpectacleList(request):\n    spectacle = Spectacle.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "SpectacleList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def SpectacleList(request):\n    spectacle = Spectacle.objects.all()\n    context = {'spectacle': spectacle}\n    return render(request, 'administration/pages/Spectacle/SpectacleList.html', context)\ndef SpectacleCreate(request):\n    if request.method == 'POST':\n        form = SpectacleForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('SpectacleList')  # Redirige vers la liste des spectacles après une soumission valide",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "SpectacleCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def SpectacleCreate(request):\n    if request.method == 'POST':\n        form = SpectacleForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('SpectacleList')  # Redirige vers la liste des spectacles après une soumission valide\n        else:\n            # Si le formulaire n'est pas valide, il renvoie le formulaire avec les erreurs\n            return render(request, 'administration/pages/Spectacle/SpectacleCreate.html', {'form': form})\n    else:",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "SpectacleUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def SpectacleUpdate(request, pk):\n    spectacle = get_object_or_404(Spectacle, pk=pk)\n    if request.method == 'POST':\n        form = SpectacleForm(request.POST, instance=spectacle)\n        if form.is_valid():\n            form.save()\n            return redirect('SpectacleList')\n        else:\n            # Si le formulaire n'est pas valide, il renvoie le formulaire avec les erreurs\n            return render(request, 'administration/pages/Spectacle/SpectacleUpdate.html', {'form': form})",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "SpectacleDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def SpectacleDelete(request, pk):\n    spectacle = get_object_or_404(Spectacle, pk=pk)\n    if request.method == 'POST':\n        spectacle.delete()\n        return redirect('SpectacleList')\n    context = {'spectacle': spectacle}\n    return render(request, 'administration/pages/Spectacle/SpectacleDelete.html', context)\n# Vue pour la generation des codes pour les  Spectacles\ndef CodeQRList(request):\n    codeQR = CodeQR.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CodeQRList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CodeQRList(request):\n    codeQR = CodeQR.objects.all()\n    context = {'codeQR': codeQR}\n    return render(request, 'administration/pages/CodeQR/CodeQRList.html', context)\ndef CodeQRCreate(request):\n    if request.method == 'POST':\n        form = CodeQRForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CodeQRList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CodeQRCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CodeQRCreate(request):\n    if request.method == 'POST':\n        form = CodeQRForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CodeQRList')\n    else:\n        form = CodeQRForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/CodeQR/CodeQRCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CodeQRUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CodeQRUpdate(request, pk):\n    codeQR = get_object_or_404(CodeQR, pk=pk)\n    if request.method == 'POST':\n        form = CodeQRForm(request.POST, instance=codeQR)\n        if form.is_valid():\n            form.save()\n            return redirect('CodeQRList')\n    else:\n        form = CodeQRForm(instance=codeQR)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CodeQRDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CodeQRDelete(request, pk):\n    codeQR = get_object_or_404(CodeQR, pk=pk)\n    if request.method == 'POST':\n        codeQR.delete()\n        return redirect('CodeQRList')\n    context = {'codeQR': codeQR}\n    return render(request, 'administration/pages/CodeQR/CodeQRDelete.html', context)\n# Vue pour les informations concernat láchat des tickets\ndef AchatList(request):\n    achat = Achat.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "AchatList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def AchatList(request):\n    achat = Achat.objects.all()\n    context = {'achat': achat}\n    return render(request, 'administration/pages/Achat/AchatList.html', context)\n# Vue pour le Prochain Concert\ndef ProchainConcertList(request):\n    prochainConcert = ProchainConcert.objects.all()\n    context = {'prochainConcert': prochainConcert}\n    return render(request, 'administration/pages/ProchainConcert/ProchainConcertList.html', context)\ndef ProchainConcertCreate(request):",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ProchainConcertList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ProchainConcertList(request):\n    prochainConcert = ProchainConcert.objects.all()\n    context = {'prochainConcert': prochainConcert}\n    return render(request, 'administration/pages/ProchainConcert/ProchainConcertList.html', context)\ndef ProchainConcertCreate(request):\n    if request.method == 'POST':\n        form = ProchainConcertForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ProchainConcertList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ProchainConcertCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ProchainConcertCreate(request):\n    if request.method == 'POST':\n        form = ProchainConcertForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ProchainConcertList')\n    else:\n        form = ProchainConcertForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/ProchainConcert/ProchainConcertCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ProchainConcertUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ProchainConcertUpdate(request, pk):\n    prochainConcert = get_object_or_404(ProchainConcert, pk=pk)\n    if request.method == 'POST':\n        form = ProchainConcertForm(request.POST, instance=prochainConcert)\n        if form.is_valid():\n            form.save()\n            return redirect('ProchainConcertList')\n    else:\n        form = ProchainConcertForm(instance=prochainConcert)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ProchainConcertDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ProchainConcertDelete(request, pk):\n    prochainConcert = get_object_or_404(ProchainConcert, pk=pk)\n    if request.method == 'POST':\n        prochainConcert.delete()\n        return redirect('ProchainConcertList')\n    context = {'prochainConcert': prochainConcert}\n    return render(request, 'administration/pages/ProchainConcert/ProchainConcertDelete.html', context)\n# Vue pour la Reservation\ndef ReservationList(request):\n    reservation = Reservation.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReservationList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReservationList(request):\n    reservation = Reservation.objects.all()\n    context = {'reservation': reservation}\n    return render(request, 'administration/pages/Reservation/ReservationList.html', context)\ndef ReservationCreate(request):\n    if request.method == 'POST':\n        form = ReservationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ReservationList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReservationCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReservationCreate(request):\n    if request.method == 'POST':\n        form = ReservationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ReservationList')\n    else:\n        form = ReservationForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/Reservation/ReservationCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReservationUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReservationUpdate(request, pk):\n    reservation = get_object_or_404(Reservation, pk=pk)\n    if request.method == 'POST':\n        form = ReservationForm(request.POST, instance=reservation)\n        if form.is_valid():\n            form.save()\n            return redirect('ReservationList')\n    else:\n        form = ReservationForm(instance=reservation)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReservationDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReservationDelete(request, pk):\n    reservation = get_object_or_404(Reservation, pk=pk)\n    if request.method == 'POST':\n        reservation.delete()\n        return redirect('ReservationList')\n    context = {'reservation': reservation}\n    return render(request, 'administration/pages/Reservation/ReservationDelete.html', context)\n# Vue pour le type d'instrument\ndef TypeInstrumentList(request):\n    typeInstrument = TypeInstrument.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeInstrumentList(request):\n    typeInstrument = TypeInstrument.objects.all()\n    context = {'typeInstrument': typeInstrument}\n    return render(request, 'administration/pages/TypeInstrument/TypeInstrumentList.html', context)\ndef TypeInstrumentCreate(request):\n    if request.method == 'POST':\n        form = TypeInstrumentForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeInstrumentList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeInstrumentCreate(request):\n    if request.method == 'POST':\n        form = TypeInstrumentForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeInstrumentList')\n    else:\n        form = TypeInstrumentForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/TypeInstrument/TypeInstrumentCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeInstrumentUpdate(request, pk):\n    typeInstrument = get_object_or_404(TypeInstrument, pk=pk)\n    if request.method == 'POST':\n        form = TypeInstrumentForm(request.POST, instance=typeInstrument)\n        if form.is_valid():\n            form.save()\n            return redirect('TypeInstrumentList')\n    else:\n        form = TypeInstrumentForm(instance=typeInstrument)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def TypeInstrumentDelete(request, pk):\n    typeInstrument = get_object_or_404(TypeInstrument, pk=pk)\n    if request.method == 'POST':\n        TypeInstrument.delete()\n        return redirect('TypeInstrumentList')\n    context = {'typeInstrument': typeInstrument}\n    return render(request, 'administration/pages/TypeInstrument/TypeInstrumentDelete.html', context)\n# Vue pour les instruments\ndef InstrumentList(request):\n    instrument = Instrument.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "InstrumentList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def InstrumentList(request):\n    instrument = Instrument.objects.all()\n    context = {'instrument': instrument}\n    return render(request, 'administration/pages/Instrument/InstrumentList.html', context)\ndef InstrumentCreate(request):\n    if request.method == 'POST':\n        form = InstrumentForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('InstrumentList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "InstrumentCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def InstrumentCreate(request):\n    if request.method == 'POST':\n        form = InstrumentForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('InstrumentList')\n    else:\n        form = InstrumentForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/Instrument/InstrumentCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "InstrumentUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def InstrumentUpdate(request, pk):\n    instrument = get_object_or_404(Instrument, pk=pk)\n    if request.method == 'POST':\n        form = InstrumentForm(request.POST, instance=instrument)\n        if form.is_valid():\n            form.save()\n            return redirect('InstrumentList')\n    else:\n        form = InstrumentForm(instance=instrument)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "InstrumentDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def InstrumentDelete(request, pk):\n    instrument = get_object_or_404(Instrument, pk=pk)\n    if request.method == 'POST':\n        Instrument.delete()\n        return redirect('InstrumentList')\n    context = {'instrument': instrument}\n    return render(request, 'administration/pages/Instrument/InstrumentDelete.html', context)\n# Vue pour les noms de formation\ndef NomFormationList(request):\n    nomFormation = NomFormation.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "NomFormationList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def NomFormationList(request):\n    nomFormation = NomFormation.objects.all()\n    context = {'nomFormation': nomFormation}\n    return render(request, 'administration/pages/NomFormation/NomFormationList.html', context)\ndef NomFormationCreate(request):\n    if request.method == 'POST':\n        form = NomFormationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('NomFormationList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "NomFormationCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def NomFormationCreate(request):\n    if request.method == 'POST':\n        form = NomFormationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('NomFormationList')\n    else:\n        form = NomFormationForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/NomFormation/NomFormationCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "NomFormationUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def NomFormationUpdate(request, pk):\n    nomFormation = get_object_or_404(NomFormation, pk=pk)\n    if request.method == 'POST':\n        form = NomFormationForm(request.POST, instance=nomFormation)\n        if form.is_valid():\n            form.save()\n            return redirect('NomFormationList')\n    else:\n        form = NomFormationForm(instance=nomFormation)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "NomFormationDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def NomFormationDelete(request, pk):\n    nomFormation = get_object_or_404(NomFormation, pk=pk)\n    if request.method == 'POST':\n        NomFormation.delete()\n        return redirect('NomFormationList')\n    context = {'nomFormation': nomFormation}\n    return render(request, 'administration/pages/NomFormation/NomFormationDelete.html', context)\n    typePaiement = get_object_or_404(TypePaiement, pk=pk)\n    if request.method == 'POST':\n        TypePaiement.delete()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "RestaurationList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def RestaurationList(request):\n    restauration = Restauration.objects.all()\n    context = {'restauration': restauration}\n    return render(request, 'administration/pages/Restauration/RestaurationList.html', context)\ndef RestaurationCreate(request):\n    if request.method == 'POST':\n        form = RestaurationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('RestaurationList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "RestaurationCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def RestaurationCreate(request):\n    if request.method == 'POST':\n        form = RestaurationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('RestaurationList')\n    else:\n        form = RestaurationForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/Restauration/RestaurationCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "RestaurationUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def RestaurationUpdate(request, pk):\n    restauration = get_object_or_404(Restauration, pk=pk)\n    if request.method == 'POST':\n        form = RestaurationForm(request.POST, instance=restauration)\n        if form.is_valid():\n            form.save()\n            return redirect('RestaurationList')\n    else:\n        form = RestaurationForm(instance=restauration)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "RestaurationDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def RestaurationDelete(request, pk):\n    restauration = get_object_or_404(Restauration, pk=pk)\n    if request.method == 'POST':\n        Restauration.delete()\n        return redirect('RestaurationList')\n    context = {'restauration': restauration}\n    return render(request, 'administration/pages/Restauration/RestaurationDelete.html', context)\n# Vue pour commander un menu\ndef ComanderMenuList(request):\n    comanderMenu = ComanderMenu.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ComanderMenuList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ComanderMenuList(request):\n    comanderMenu = ComanderMenu.objects.all()\n    context = {'comanderMenu': comanderMenu}\n    return render(request, 'administration/pages/ComanderMenu/ComanderMenuList.html', context)\ndef ComanderMenuDelete(request, pk):\n    comanderMenu = get_object_or_404(ComanderMenu, pk=pk)\n    if request.method == 'POST':\n        ComanderMenu.delete()\n        return redirect('ComanderMenuList')\n    context = {'comanderMenu': comanderMenu}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ComanderMenuDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ComanderMenuDelete(request, pk):\n    comanderMenu = get_object_or_404(ComanderMenu, pk=pk)\n    if request.method == 'POST':\n        ComanderMenu.delete()\n        return redirect('ComanderMenuList')\n    context = {'comanderMenu': comanderMenu}\n    return render(request, 'administration/pages/ComanderMenu/ComanderMenuDelete.html', context)\n# Vue pour les Payment\n# def PaymentList(request):\n#     payment = Payment.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReserverFormationList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReserverFormationList(request):\n    reserverFormation = ReserverFormation.objects.all()\n    context = {'reserverFormation': reserverFormation}\n    return render(request, 'administration/pages/ReserverFormation/ReserverFormationList.html', context)\ndef ReserverFormationCreate(request):\n    if request.method == 'POST':\n        form = ReserverFormatioForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ReserverFormationList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReserverFormationCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReserverFormationCreate(request):\n    if request.method == 'POST':\n        form = ReserverFormatioForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('ReserverFormationList')\n    else:\n        form = ReserverFormatioForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/ReserverFormation/ReserverFormationCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReserverFormationUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReserverFormationUpdate(request, pk):\n    reserverFormation = get_object_or_404(ReserverFormation, pk=pk)\n    if request.method == 'POST':\n        form = ReserverFormation(request.POST, instance=reserverFormation)\n        if form.is_valid():\n            form.save()\n            return redirect('ReserverFormationList')\n    else:\n        form = ReserverFormationForm(instance=reserverFormation)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "ReserverFormationDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def ReserverFormationDelete(request, pk):\n    reserverFormation = get_object_or_404(ReserverFormation, pk=pk)\n    if request.method == 'POST':\n        ReserverFormation.delete()\n        return redirect('ReserverFormationList')\n    context = {'reserverFormation': reserverFormation}\n    return render(request, 'administration/pages/ReserverFormation/ReserverFormationDelete.html', context)\n# Vue pour les Carrousel\ndef CarrouselList(request):\n    carrousel = Carrousel.objects.all()",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CarrouselList",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CarrouselList(request):\n    carrousel = Carrousel.objects.all()\n    context = {'carrousel': carrousel}\n    return render(request, 'administration/pages/Carrousel/CarrouselList.html', context)\ndef CarrouselCreate(request):\n    if request.method == 'POST':\n        form = CarrouselForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CarrouselList')",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CarrouselCreate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CarrouselCreate(request):\n    if request.method == 'POST':\n        form = CarrouselForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('CarrouselList')\n    else:\n        form = CarrouselForm()\n    context = {'form': form}\n    return render(request, 'administration/pages/Carrousel/CarrouselCreate.html', context)",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CarrouselUpdate",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CarrouselUpdate(request, pk):\n    carrousel = get_object_or_404(Carrousel, pk=pk)\n    if request.method == 'POST':\n        form = CarrouselForm(request.POST, instance=carrousel)\n        if form.is_valid():\n            form.save()\n            return redirect('CarrouselList')\n    else:\n        form = CarrouselForm(instance=carrousel)\n    context = {'form': form}",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "CarrouselDelete",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def CarrouselDelete(request, pk):\n    carrousel = get_object_or_404(Carrousel, pk=pk)\n    if request.method == 'POST':\n        Carrousel.delete()\n        return redirect('CarrouselList')\n    context = {'carrousel': carrousel}\n    return render(request, 'administration/pages/Carrousel/CarrouselDelete.html', context)\ndef statistiques(request):\n    prochains_concerts = ProchainConcert.objects.filter(is_active=True)\n    concert_dates = [concert.date.strftime('%Y-%m-%d') for concert in prochains_concerts]",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "statistiques",
        "kind": 2,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "def statistiques(request):\n    prochains_concerts = ProchainConcert.objects.filter(is_active=True)\n    concert_dates = [concert.date.strftime('%Y-%m-%d') for concert in prochains_concerts]\n    concert_counts = [ProchainConcert.objects.filter(date=concert.date).count() for concert in prochains_concerts]\n    # Données pour les spectacles et les paiements\n    spectacles = Spectacle.objects.all()\n    spectacle_dates = [spectacle.date.strftime('%Y-%m-%d') for spectacle in spectacles]\n    spectacle_counts = [Spectacle.objects.filter(date=spectacle.date).count() for spectacle in spectacles]\n    ticket_payments = [\n        Achat.objects.filter(spectacle__date=spectacle.date).aggregate(Sum('montant_total'))['montant_total__sum'] or 0",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "administration.views",
        "description": "administration.views",
        "peekOfCode": "User = get_user_model()\ndef is_admin(user):\n    return user.is_superuser\nclass AdminUserCreateAPIView(APIView):\n    def get(self, request):\n        return render(request, 'administration/createsuper.html')\n    def post(self, request):\n        email_or_phone = request.POST.get('email_or_phone')\n        password = request.POST.get('password')\n        if not email_or_phone or not password:",
        "detail": "administration.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "AfricaShows.asgi",
        "description": "AfricaShows.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "AfricaShows.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = os.getenv('DEBUG') == 'True'\n# SECURITY WARNING: don't run with debug turned on in production!\nALLOWED_HOSTS = os.getenv(\"DJANGO_ALLOWED_HOSTS\").split(\",\")\nCORS_ALLOWED_ORIGINS = os.getenv(\"CORS_ALLOWED_ORIGINS\").split(\",\")\n# Application definition",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\nDEBUG = os.getenv('DEBUG') == 'True'\n# SECURITY WARNING: don't run with debug turned on in production!\nALLOWED_HOSTS = os.getenv(\"DJANGO_ALLOWED_HOSTS\").split(\",\")\nCORS_ALLOWED_ORIGINS = os.getenv(\"CORS_ALLOWED_ORIGINS\").split(\",\")\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG') == 'True'\n# SECURITY WARNING: don't run with debug turned on in production!\nALLOWED_HOSTS = os.getenv(\"DJANGO_ALLOWED_HOSTS\").split(\",\")\nCORS_ALLOWED_ORIGINS = os.getenv(\"CORS_ALLOWED_ORIGINS\").split(\",\")\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv(\"DJANGO_ALLOWED_HOSTS\").split(\",\")\nCORS_ALLOWED_ORIGINS = os.getenv(\"CORS_ALLOWED_ORIGINS\").split(\",\")\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = os.getenv(\"CORS_ALLOWED_ORIGINS\").split(\",\")\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'allauth',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ],\n}\nSITE_ID = 1\nREST_USE_JWT = True",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "SITE_ID = 1\nREST_USE_JWT = True\nLANGUAGE_CODE = 'fr' \nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "REST_USE_JWT",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "REST_USE_JWT = True\nLANGUAGE_CODE = 'fr' \nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr' \nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_TZ = True\nLANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "LANGUAGES = [('en', 'English'),('fr', 'French'),]\nLOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    'django.middleware.locale.LocaleMiddleware'",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ROOT_URLCONF = 'AfricaShows.urls'\nAUTH_USER_MODEL = 'app.User'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates'\n            ],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'app.User'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates'\n            ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates'\n            ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "WSGI_APPLICATION = 'AfricaShows.wsgi.application'\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE'),\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE'),\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),\n    }\n}",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'allauth.account.auth_backends.AuthenticationBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' ",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "MEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_FROM",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_FROM = os.getenv('EMAIL_FROM')\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_PORT = int(os.getenv('EMAIL_PORT'))\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nPASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_TIMEOUT",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "PASSWORD_RESET_TIMEOUT = 14400\nKKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "KKIAPAY_API_KEY",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "KKIAPAY_API_KEY = config('KKIAPAY_API_KEY')\nKKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "KKIAPAY_CALLBACK_URL",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "KKIAPAY_CALLBACK_URL = config('KKIAPAY_CALLBACK_URL')\n# Configurer allauth pour la gestion des e-mails\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS",
        "kind": 5,
        "importPath": "AfricaShows.settings",
        "description": "AfricaShows.settings",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1",
        "detail": "AfricaShows.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "AfricaShows.urls",
        "description": "AfricaShows.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('allauth.urls')),\n    # path('home', home, name='home'),\n    path('', home, name='home'),\n    path('app/', include('app.urls')),\n    path('administration/', include('administration.urls')),\n    path('i18n/', include('django.conf.urls.i18n')),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "AfricaShows.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "AfricaShows.wsgi",
        "description": "AfricaShows.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "AfricaShows.wsgi",
        "documentation": {}
    },
    {
        "label": "Seeder",
        "kind": 6,
        "importPath": "app.management.commands.seed-superadmin",
        "description": "app.management.commands.seed-superadmin",
        "peekOfCode": "class Seeder:\n    @classmethod\n    def seedSuperAdmin(cls):       \n        super_email_or_phone = input(\"Enter super user email or phone:\")\n        super_password = input(\"Enter super user password:\")\n        with transaction.atomic():\n            # Recherchons un utilisateur existant basé sur email_or_phone\n            super_user, created = User.objects.get_or_create(\n                email_or_phone=super_email_or_phone,\n                defaults={",
        "detail": "app.management.commands.seed-superadmin",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.management.commands.seed-superadmin",
        "description": "app.management.commands.seed-superadmin",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Seed the database with initial data'\n    def handle(self, *args, **kwargs):\n        self.stdout.write('Seeding Super Admin...')\n        Seeder.seedSuperAdmin()\n        self.stdout.write(self.style.SUCCESS('Successfully seeded the Super Admin'))",
        "detail": "app.management.commands.seed-superadmin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "app.management.commands.seed-superadmin",
        "description": "app.management.commands.seed-superadmin",
        "peekOfCode": "User = get_user_model()\nclass Seeder:\n    @classmethod\n    def seedSuperAdmin(cls):       \n        super_email_or_phone = input(\"Enter super user email or phone:\")\n        super_password = input(\"Enter super user password:\")\n        with transaction.atomic():\n            # Recherchons un utilisateur existant basé sur email_or_phone\n            super_user, created = User.objects.get_or_create(\n                email_or_phone=super_email_or_phone,",
        "detail": "app.management.commands.seed-superadmin",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.management.commands.update_active_concert",
        "description": "app.management.commands.update_active_concert",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Update active concert'\n    def handle(self, *args, **options):\n        now = timezone.now()\n        ProchainConcert.objects.filter(date__lt=now, is_active=True).update(is_active=False)\n        next_concert = ProchainConcert.objects.filter(date__gt=now, is_active=False).first()\n        if next_concert:\n            next_concert.is_active = True\n            next_concert.save()",
        "detail": "app.management.commands.update_active_concert",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.migrations.0001_initial",
        "description": "app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ArtisteInvite',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ('id', 'email_or_phone', 'last_login_date' ,'last_modify_date', 'deactivate_date', 'first_name', 'last_name', 'is_artistes', 'is_admin', 'is_active')\n    list_filter = ('is_admin', 'is_active')\n    list_editable = ('first_name', 'last_name')\n    fieldsets = (\n        (None, {'fields': ('email_or_phone', 'password', 'first_name', 'last_name')}),\n        ('Permissions', {'fields': ('is_admin', 'is_artistes', 'is_active')}),\n    )\n    add_fieldsets = (\n        (None, {",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ArtistesAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ArtistesAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'biographie', 'image')  \n    ordering = ('id',)\n@admin.register(Centre)\nclass CentreAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'logo', 'cygle', 'adresse')\n    ordering = ('id',)\n@admin.register(TypeDiffusion)\nclass TypeDiffusionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'is_gratuit')",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "CentreAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CentreAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'logo', 'cygle', 'adresse')\n    ordering = ('id',)\n@admin.register(TypeDiffusion)\nclass TypeDiffusionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'is_gratuit')\n    search_fields = ('nom',)\n    ordering = ('id',)\n@admin.register(ArtisteInvite)\nclass ArtisteInviteAdmin(admin.ModelAdmin):",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class TypeDiffusionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'is_gratuit')\n    search_fields = ('nom',)\n    ordering = ('id',)\n@admin.register(ArtisteInvite)\nclass ArtisteInviteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'phone', 'image_artiste')\n    search_fields = ('nom', 'phone')\n    ordering = ('id',)\n@admin.register(CategorieArtiste)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ArtisteInviteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'phone', 'image_artiste')\n    search_fields = ('nom', 'phone')\n    ordering = ('id',)\n@admin.register(CategorieArtiste)\nclass CategorieArtisteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_artiste', 'categorie')\n    search_fields = ('nom_artiste__nom', 'categorie')\n    ordering = ('id',)\n@admin.register(TypeSpectacle)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CategorieArtisteAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_artiste', 'categorie')\n    search_fields = ('nom_artiste__nom', 'categorie')\n    ordering = ('id',)\n@admin.register(TypeSpectacle)\nclass TypeSpectacleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type', 'is_valid')\n    search_fields = ('type',)\n    ordering = ('id',)\n@admin.register(Spectacle)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class TypeSpectacleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type', 'is_valid')\n    search_fields = ('type',)\n    ordering = ('id',)\n@admin.register(Spectacle)\nclass SpectacleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_spectacle', 'nom_spectacle', 'image', 'date', 'lieu', 'description', \n                    'ticket_disponible', 'is_gratuit', 'prix', 'heure_debut', 'heure_fin', 'lien_streaming', 'is_valid')\n    search_fields = ('nom_spectacle', 'lieu')\n    list_filter = ('date', 'is_gratuit')",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "SpectacleAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class SpectacleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_spectacle', 'nom_spectacle', 'image', 'date', 'lieu', 'description', \n                    'ticket_disponible', 'is_gratuit', 'prix', 'heure_debut', 'heure_fin', 'lien_streaming', 'is_valid')\n    search_fields = ('nom_spectacle', 'lieu')\n    list_filter = ('date', 'is_gratuit')\n    ordering = ('id',)\n@admin.register(CodeQR)\nclass CodeQRAdmin(admin.ModelAdmin):\n    list_display = ('id', 'spectacle', 'code_qr', 'token', 'device_info', 'is_used')\n    search_fields = ('spectacle__nom_spectacle', 'token')",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "CodeQRAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CodeQRAdmin(admin.ModelAdmin):\n    list_display = ('id', 'spectacle', 'code_qr', 'token', 'device_info', 'is_used')\n    search_fields = ('spectacle__nom_spectacle', 'token')\n    ordering = ('id',)\n@admin.register(Achat)\nclass AchatAdmin(admin.ModelAdmin):\n    list_display = ('id', 'spectacle', 'user_email', 'quantity', 'montant_total', 'date_achat', 'statut_paiement')\n    list_filter = ('spectacle', 'statut_paiement', 'date_achat')\n    search_fields = ('user_email', 'transaction_id')\n    ordering = ('-date_achat',)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "AchatAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class AchatAdmin(admin.ModelAdmin):\n    list_display = ('id', 'spectacle', 'user_email', 'quantity', 'montant_total', 'date_achat', 'statut_paiement')\n    list_filter = ('spectacle', 'statut_paiement', 'date_achat')\n    search_fields = ('user_email', 'transaction_id')\n    ordering = ('-date_achat',)\n@admin.register(Reservation)\nclass ReservationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'email', 'spectacle', 'nombre_billets', 'cout_total', 'statut_paiement', 'is_valid')\n    search_fields = ('nom', 'email', 'spectacle__nom_spectacle')\n    ordering = ('id',)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ReservationAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ReservationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'email', 'spectacle', 'nombre_billets', 'cout_total', 'statut_paiement', 'is_valid')\n    search_fields = ('nom', 'email', 'spectacle__nom_spectacle')\n    ordering = ('id',)\n@admin.register(TypeInstrument)\nclass TypeInstrumentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_instrument',)\n    search_fields = ('type_instrument',)\n    ordering = ('id',)\n@admin.register(Instrument)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class TypeInstrumentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_instrument',)\n    search_fields = ('type_instrument',)\n    ordering = ('id',)\n@admin.register(Instrument)\nclass InstrumentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_instrument', 'nom_instructeur', 'prenom_instructeur')\n    search_fields = ('type_instrument__type_instrument', 'nom_instructeur', 'prenom_instructeur')\n    ordering = ('id',)\n@admin.register(NomFormation)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "InstrumentAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class InstrumentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_instrument', 'nom_instructeur', 'prenom_instructeur')\n    search_fields = ('type_instrument__type_instrument', 'nom_instructeur', 'prenom_instructeur')\n    ordering = ('id',)\n@admin.register(NomFormation)\nclass NomFormationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_formation', 'type_instrument', 'image', 'description', 'prix')\n    search_fields = ('nom_formation', 'type_instrument__type_instrument')\n    ordering = ('id',)\n@admin.register(Service)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "NomFormationAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class NomFormationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_formation', 'type_instrument', 'image', 'description', 'prix')\n    search_fields = ('nom_formation', 'type_instrument__type_instrument')\n    ordering = ('id',)\n@admin.register(Service)\nclass ServiceAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_formation', 'type_formation', 'instrument', 'date_formation')\n    search_fields = ('nom_formation__nom_formation', 'type_formation', 'instrument__type_instrument')\n    ordering = ('id',)\n@admin.register(TypePaiement)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ServiceAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ServiceAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom_formation', 'type_formation', 'instrument', 'date_formation')\n    search_fields = ('nom_formation__nom_formation', 'type_formation', 'instrument__type_instrument')\n    ordering = ('id',)\n@admin.register(TypePaiement)\nclass TypePaiementAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom',)\n    search_fields = ('nom',)\n    ordering = ('id',)\n@admin.register(ReserverService)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "TypePaiementAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class TypePaiementAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom',)\n    search_fields = ('nom',)\n    ordering = ('id',)\n@admin.register(ReserverService)\nclass ReserverServiceAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_paiement', 'nom_formation', 'type_instrument', 'nom', 'prenoms', 'telephone', 'nombre_place', 'date_paiement', 'montant', 'is_valid')\n    search_fields = ('nom_formation__nom_formation', 'type_instrument__type_instrument', 'nom', 'prenoms', 'telephone')\n    ordering = ('id',)\n@admin.register(Restauration)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ReserverServiceAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ReserverServiceAdmin(admin.ModelAdmin):\n    list_display = ('id', 'type_paiement', 'nom_formation', 'type_instrument', 'nom', 'prenoms', 'telephone', 'nombre_place', 'date_paiement', 'montant', 'is_valid')\n    search_fields = ('nom_formation__nom_formation', 'type_instrument__type_instrument', 'nom', 'prenoms', 'telephone')\n    ordering = ('id',)\n@admin.register(Restauration)\nclass RestaurationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'menu', 'description', 'image', 'prix')\n    search_fields = ('menu',)\n    ordering = ('id',)\n@admin.register(ComanderMenu)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "RestaurationAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class RestaurationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'menu', 'description', 'image', 'prix')\n    search_fields = ('menu',)\n    ordering = ('id',)\n@admin.register(ComanderMenu)\nclass ComanderMenuAdmin(admin.ModelAdmin):\n    list_display = ('id', 'menu', 'nom', 'prenoms', 'email', 'telephone', 'nombre_commande', 'date_paiement', 'montant', 'is_valid')\n    search_fields = ('menu__menu', 'nom', 'prenoms', 'telephone')\n    ordering = ('id',)\n# @admin.register(Payment)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ComanderMenuAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ComanderMenuAdmin(admin.ModelAdmin):\n    list_display = ('id', 'menu', 'nom', 'prenoms', 'email', 'telephone', 'nombre_commande', 'date_paiement', 'montant', 'is_valid')\n    search_fields = ('menu__menu', 'nom', 'prenoms', 'telephone')\n    ordering = ('id',)\n# @admin.register(Payment)\n# class PaymentAdmin(admin.ModelAdmin):\n#     list_display = ('id', 'date', 'montant', 'montant_remis', 'relicat')\n#     search_fields = ('date',)\n#     ordering = ('id',)\n@admin.register(ReserverFormation)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ReserverFormationAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ReserverFormationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'nom', 'prenom', 'telephone', 'instrument', 'nombre_de_places', 'montant')\n    search_fields = ('nom', 'prenom', 'telephone', 'instrument__type_instrument')\n    ordering = ('id',)\nclass CarrouselInline(admin.TabularInline):\n    model = Carrousel\n    extra = 1  # Nombre de lignes supplémentaires à afficher\n@admin.register(ProchainConcert)\nclass ProchainConcertAdmin(admin.ModelAdmin):\n    list_display = ('id', 'date', 'spectacle', 'is_active')",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "CarrouselInline",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CarrouselInline(admin.TabularInline):\n    model = Carrousel\n    extra = 1  # Nombre de lignes supplémentaires à afficher\n@admin.register(ProchainConcert)\nclass ProchainConcertAdmin(admin.ModelAdmin):\n    list_display = ('id', 'date', 'spectacle', 'is_active')\n    search_fields = ('date',)\n    ordering = ('id',)\n    inlines = [CarrouselInline]\n@admin.register(Carrousel)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "ProchainConcertAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class ProchainConcertAdmin(admin.ModelAdmin):\n    list_display = ('id', 'date', 'spectacle', 'is_active')\n    search_fields = ('date',)\n    ordering = ('id',)\n    inlines = [CarrouselInline]\n@admin.register(Carrousel)\nclass CarrouselAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prochain_concert', 'image_affiche')\n    ordering = ('id',)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "CarrouselAdmin",
        "kind": 6,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "class CarrouselAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prochain_concert', 'image_affiche')\n    ordering = ('id',)",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "app.admin",
        "description": "app.admin",
        "peekOfCode": "User = get_user_model()\nclass UserAdmin(admin.ModelAdmin):\n    list_display = ('id', 'email_or_phone', 'last_login_date' ,'last_modify_date', 'deactivate_date', 'first_name', 'last_name', 'is_artistes', 'is_admin', 'is_active')\n    list_filter = ('is_admin', 'is_active')\n    list_editable = ('first_name', 'last_name')\n    fieldsets = (\n        (None, {'fields': ('email_or_phone', 'password', 'first_name', 'last_name')}),\n        ('Permissions', {'fields': ('is_admin', 'is_artistes', 'is_active')}),\n    )\n    add_fieldsets = (",
        "detail": "app.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "app.apps",
        "description": "app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'",
        "detail": "app.apps",
        "documentation": {}
    },
    {
        "label": "manage_type_spectacles",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_type_spectacles(action, data=None, instance_id=None):\n    \"\"\"\n    Fonction pour gérer les opérations CRUD sur les objets TypeSpectacle.\n    :param action: L'action à effectuer ('list', 'retrieve', 'create', 'update', 'delete').\n    :param data: Les données nécessaires pour créer ou mettre à jour un objet.\n    :param instance_id: L'ID de l'objet à récupérer, mettre à jour ou supprimer.\n    :return: Les données sérialisées ou un message d'état.\n    \"\"\"\n    try:\n        if action == 'list':",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_type_spectacles",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_type_spectacles(action, data=None, instance_id=None):\n    \"\"\"\n    Fonction utilitaire pour gérer les opérations CRUD sur les objets TypeSpectacle.\n    :param action: L'action à effectuer ('list', 'retrieve', 'create', 'update', 'delete').\n    :param data: Les données nécessaires pour créer ou mettre à jour un objet.\n    :param instance_id: L'ID de l'objet à récupérer, mettre à jour ou supprimer.\n    :return: Les données sérialisées ou un message d'état.\n    \"\"\"\n    try:\n        if action == 'list':",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_spectacles",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_spectacles(action, data=None, instance_id=None):\n    \"\"\"\n    Fonction utilitaire pour gérer les opérations CRUD sur les objets Spectacle.\n    :param action: L'action à effectuer ('list', 'retrieve', 'create', 'update', 'delete').\n    :param data: Les données nécessaires pour créer ou mettre à jour un objet.\n    :param instance_id: L'ID de l'objet à récupérer, mettre à jour ou supprimer.\n    :return: Les données sérialisées ou un message d'état.\n    \"\"\"\n    try:\n        if action == 'list':",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_centres",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_centres(action, data=None, instance_id=None):\n    \"\"\"\n    Fonction utilitaire pour gérer les opérations CRUD sur les objets Centre.\n    :param action: L'action à effectuer ('list', 'retrieve', 'create', 'update', 'delete').\n    :param data: Les données nécessaires pour créer ou mettre à jour un objet.\n    :param instance_id: L'ID de l'objet à récupérer, mettre à jour ou supprimer.\n    :return: Les données sérialisées ou un message d'état.\n    \"\"\"\n    try:\n        if action == 'list':",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_reservations",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_reservations(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = Reservation.objects.all()\n            serializer = ReservationSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = Reservation.objects.get(id=instance_id)\n            serializer = ReservationSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_type_instruments",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_type_instruments(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = TypeInstrument.objects.all()\n            serializer = TypeInstrumentSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = TypeInstrument.objects.get(id=instance_id)\n            serializer = TypeInstrumentSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_instruments",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_instruments(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = Instrument.objects.all()\n            serializer = InstrumentSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = Instrument.objects.get(id=instance_id)\n            serializer = InstrumentSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_nom_formations",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_nom_formations(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = NomFormation.objects.all()\n            serializer = NomFormationSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = NomFormation.objects.get(id=instance_id)\n            serializer = NomFormationSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_services",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_services(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = Service.objects.all()\n            serializer = ServiceSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = Service.objects.get(id=instance_id)\n            serializer = ServiceSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_type_paiements",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_type_paiements(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = TypePaiement.objects.all()\n            serializer = TypePaiementSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = TypePaiement.objects.get(id=instance_id)\n            serializer = TypePaiementSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_reserver_services",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_reserver_services(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = ReserverService.objects.all()\n            serializer = ReserverServiceSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = ReserverService.objects.get(id=instance_id)\n            serializer = ReserverServiceSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_restauration",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_restauration(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = Restauration.objects.all()\n            serializer = RestaurationSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = Restauration.objects.get(id=instance_id)\n            serializer = RestaurationSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_comander_menu",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_comander_menu(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = ComanderMenu.objects.all()\n            serializer = ComanderMenuSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = ComanderMenu.objects.get(id=instance_id)\n            serializer = ComanderMenuSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_reserver_formation",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_reserver_formation(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = ReserverFormation.objects.all()\n            serializer = ReserverFormationSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = ReserverFormation.objects.get(id=instance_id)\n            serializer = ReserverFormationSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_artiste_invite",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_artiste_invite(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = ArtisteInvite.objects.all()\n            serializer = ArtisteInviteSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = ArtisteInvite.objects.get(id=instance_id)\n            serializer = ArtisteInviteSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_categorie_artiste",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_categorie_artiste(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = CategorieArtiste.objects.all()\n            serializer = CategorieArtisteSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = CategorieArtiste.objects.get(id=instance_id)\n            serializer = CategorieArtisteSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "manage_user",
        "kind": 2,
        "importPath": "app.function",
        "description": "app.function",
        "peekOfCode": "def manage_user(action, data=None, instance_id=None):\n    try:\n        if action == 'list':\n            queryset = get_user_model().objects.all()\n            serializer = RegisterUserSerializer(queryset, many=True)\n            return serializer.data\n        if action == 'retrieve':\n            instance = get_user_model().objects.get(id=instance_id)\n            serializer = RegisterUserSerializer(instance)\n            return serializer.data",
        "detail": "app.function",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def validate_email_or_phone_unique(self, value):\n        # Vérifier si une adresse e-mail ou un numéro de téléphone existe déjà dans la base de données\n        if self.model.objects.filter(email_or_phone=value).exists():\n            raise ValidationError(\n                _('Un utilisateur avec cet email ou numéro de téléphone existe déjà.'),\n                params={'value': value},\n            )\n    def create_user(self, email_or_phone, password=None, **extra_fields):\n        if not email_or_phone:",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(AbstractUser, PermissionsMixin):\n    username = None\n    email_or_phone = models.CharField(max_length=100, unique=True)\n    password = models.CharField(max_length=128)\n    hostname = models.CharField(max_length=255, blank=True, null=True)\n    create_date = models.DateTimeField(default=timezone.now)\n    last_login_date = models.DateTimeField(null=True, blank=True)\n    last_modify_date = models.DateTimeField(null=True, blank=True)\n    deactivate_date = models.DateTimeField(null=True, blank=True)\n    is_active = models.BooleanField(default=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Artistes",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Artistes(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='artiste_user')\n    nom = models.CharField(max_length=100)\n    biographie = models.TextField()\n    image = models.ImageField(upload_to='artistes/', null=True, blank=True)\n    def __str__(self):\n        return self.nom\nclass Centre(models.Model):\n    nom = models.CharField(max_length=100)\n    logo = models.ImageField(upload_to='centre_logos/', null=True, blank=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Centre",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Centre(models.Model):\n    nom = models.CharField(max_length=100)\n    logo = models.ImageField(upload_to='centre_logos/', null=True, blank=True)\n    cygle = models.CharField(max_length=100, null=True, blank=True)\n    adresse = models.TextField()\n    def __str__(self):\n        return self.nom\nclass ArtisteInvite(models.Model):\n    nom = models.CharField(max_length=100)\n    phone = models.CharField(max_length=20)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ArtisteInvite",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ArtisteInvite(models.Model):\n    nom = models.CharField(max_length=100)\n    phone = models.CharField(max_length=20)\n    image_artiste = models.ImageField(upload_to='artiste_invite_images/', null=True, blank=True)\n    def __str__(self):\n        return self.nom\nclass CategorieArtiste(models.Model):\n    CATEGORIE_CHOICES = [\n        ('nationale', 'Nationale'),\n        ('internationale', 'Internationale'),",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CategorieArtiste",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class CategorieArtiste(models.Model):\n    CATEGORIE_CHOICES = [\n        ('nationale', 'Nationale'),\n        ('internationale', 'Internationale'),\n    ]\n    nom_artiste = models.ForeignKey(ArtisteInvite, on_delete=models.CASCADE, related_name='categories')\n    categorie = models.CharField(max_length=20, choices=CATEGORIE_CHOICES)\n    def __str__(self):\n        return self.nom_artiste.nom\nclass TypeDiffusion(models.Model):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TypeDiffusion",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TypeDiffusion(models.Model):\n    nom = models.CharField(max_length=100)\n    is_gratuit = models.BooleanField(default=False)\n    def __str__(self):\n        return self.nom\nclass TypeSpectacle(models.Model):\n    type = models.CharField(max_length=100)\n    is_valid = models.BooleanField(default=True)\n    def __str__(self):\n        return self.type",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TypeSpectacle",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TypeSpectacle(models.Model):\n    type = models.CharField(max_length=100)\n    is_valid = models.BooleanField(default=True)\n    def __str__(self):\n        return self.type\nclass Spectacle(models.Model):\n    type_spectacle = models.ForeignKey(TypeSpectacle, on_delete=models.CASCADE)\n    nom_spectacle = models.CharField(max_length=100)\n    image = models.ImageField(upload_to='spectacles/', null=True, blank=True)\n    date = models.DateField()",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Spectacle",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Spectacle(models.Model):\n    type_spectacle = models.ForeignKey(TypeSpectacle, on_delete=models.CASCADE)\n    nom_spectacle = models.CharField(max_length=100)\n    image = models.ImageField(upload_to='spectacles/', null=True, blank=True)\n    date = models.DateField()\n    lieu = models.CharField(max_length=255)\n    description = models.TextField()\n    ticket_disponible = models.PositiveIntegerField()\n    is_gratuit = models.BooleanField(default=False)\n    prix = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "CodeQR",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class CodeQR(models.Model):\n    spectacle = models.OneToOneField(Spectacle, on_delete=models.CASCADE, related_name='code_qr')\n    code_qr = models.ImageField(upload_to='codes_qr/', null=True, blank=True)\n    token = models.CharField(max_length=32, unique=True)\n    code_secret = models.CharField(max_length=6, unique=True)\n    device_info = models.CharField(max_length=255, null=True, blank=True)\n    is_used = models.BooleanField(default=False)\n    def __str__(self):\n        return f\"Code QR pour {self.spectacle}\"\n    def generer_token(self):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Achat",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Achat(models.Model):\n    spectacle = models.ForeignKey(Spectacle, on_delete=models.CASCADE)\n    user_email = models.EmailField()\n    quantity = models.PositiveIntegerField()\n    date_achat = models.DateTimeField(auto_now_add=True)\n    montant_total = models.DecimalField(max_digits=10, decimal_places=2)\n    transaction_id = models.CharField(max_length=100, unique=True)\n    statut_paiement = models.CharField(max_length=20)\n    def __str__(self):\n        return f\"Achat {self.transaction_id} pour {self.spectacle}\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ProchainConcert",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ProchainConcert(models.Model):\n    date = models.DateTimeField()\n    spectacle = models.ForeignKey(Spectacle, on_delete=models.CASCADE)\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        return f\"Prochain Concert {self.date} - {self.spectacle.nom_spectacle} - {self.spectacle.id}\"\n    class Meta:\n        ordering = ['date']\nclass Carrousel(models.Model):\n    image_affiche = models.ImageField(upload_to='carrousel_images/')",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Carrousel",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Carrousel(models.Model):\n    image_affiche = models.ImageField(upload_to='carrousel_images/')\n    prochain_concert = models.ForeignKey(ProchainConcert, on_delete=models.CASCADE, related_name='carrousels')\n    def __str__(self):\n        return f\"Affiche pour {self.prochain_concert.spectacle.nom_spectacle} le {self.prochain_concert.date}\"\nclass Reservation(models.Model):\n    nom = models.CharField(max_length=100)\n    email = models.EmailField()\n    spectacle = models.ForeignKey(Spectacle, on_delete=models.CASCADE)\n    nombre_billets = models.PositiveIntegerField()",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Reservation",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Reservation(models.Model):\n    nom = models.CharField(max_length=100)\n    email = models.EmailField()\n    spectacle = models.ForeignKey(Spectacle, on_delete=models.CASCADE)\n    nombre_billets = models.PositiveIntegerField()\n    cout_total = models.DecimalField(max_digits=10, decimal_places=2)\n    statut_paiement = models.BooleanField(default=False)\n    is_valid = models.BooleanField(default=True)\n    def __str__(self):\n        return f\"Réservation de {self.nom} pour {self.spectacle}\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TypeInstrument",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TypeInstrument(models.Model):\n    type_instrument = models.CharField(max_length=100, unique=True)\n    def __str__(self):\n        return self.type_instrument\nclass Instrument(models.Model):\n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE) \n    nom_instructeur = models.CharField(max_length=100)\n    prenom_instructeur = models.CharField(max_length=100)\n    def __str__(self):\n        return f\"{self.type_instrument}\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Instrument",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Instrument(models.Model):\n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE) \n    nom_instructeur = models.CharField(max_length=100)\n    prenom_instructeur = models.CharField(max_length=100)\n    def __str__(self):\n        return f\"{self.type_instrument}\"\nclass NomFormation(models.Model):\n    nom_formation = models.CharField(max_length=100, unique=True)\n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='instrument/', null=True, blank=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "NomFormation",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class NomFormation(models.Model):\n    nom_formation = models.CharField(max_length=100, unique=True)\n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE)\n    image = models.ImageField(upload_to='instrument/', null=True, blank=True)\n    description = models.TextField()\n    prix = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return f\"{self.nom_formation}- {self.type_instrument}\"\nclass Service(models.Model):\n    TYPE_FORMATION_CHOICES = [",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Service(models.Model):\n    TYPE_FORMATION_CHOICES = [\n        ('presentiel', 'Présentiel'),\n        ('en_ligne', 'En ligne'),\n        ('hybride', 'Hybride'),\n    ]\n    nom_formation = models.ForeignKey(NomFormation, on_delete=models.CASCADE) \n    type_formation = models.CharField(max_length=20, choices=TYPE_FORMATION_CHOICES)\n    instrument = models.ForeignKey(Instrument, on_delete=models.CASCADE)\n    date_formation = models.DateField()",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "TypePaiement",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class TypePaiement(models.Model):\n    nom = models.CharField(max_length=100)\n    def __str__(self):\n        return self.nom\nclass ReserverService(models.Model):\n    type_paiement = models.ForeignKey(TypePaiement, on_delete=models.CASCADE)  \n    nom_formation = models.ForeignKey(NomFormation, on_delete=models.CASCADE)  \n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE)\n    nom = models.CharField(max_length=100)\n    prenoms = models.CharField(max_length=100)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ReserverService",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ReserverService(models.Model):\n    type_paiement = models.ForeignKey(TypePaiement, on_delete=models.CASCADE)  \n    nom_formation = models.ForeignKey(NomFormation, on_delete=models.CASCADE)  \n    type_instrument = models.ForeignKey(TypeInstrument, on_delete=models.CASCADE)\n    nom = models.CharField(max_length=100)\n    prenoms = models.CharField(max_length=100)\n    telephone = models.CharField(max_length=100)                                                                                                         \n    nombre_place = models.PositiveIntegerField()\n    date_paiement = models.DateField()\n    montant = models.DecimalField(max_digits=10, decimal_places=2)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Restauration",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Restauration(models.Model):\n    menu = models.CharField(max_length=100)\n    description = models.TextField()\n    image = models.ImageField(upload_to='restaurants/')  \n    prix = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return self.nom\nclass ComanderMenu(models.Model):\n    menu = models.ForeignKey(Restauration, on_delete=models.CASCADE) \n    nom = models.CharField(max_length=100)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ComanderMenu",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ComanderMenu(models.Model):\n    menu = models.ForeignKey(Restauration, on_delete=models.CASCADE) \n    nom = models.CharField(max_length=100)\n    prenoms = models.CharField(max_length=100)\n    email = models.EmailField()\n    telephone = models.CharField(max_length=100)                                                                                                         \n    nombre_commande = models.PositiveIntegerField()\n    date_paiement = models.DateField()\n    montant = models.DecimalField(max_digits=10, decimal_places=2)\n    is_valid = models.BooleanField(default=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ReserverFormation",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class ReserverFormation(models.Model):\n    nom = models.CharField(max_length=100)\n    prenom = models.CharField(max_length=100)\n    email = models.EmailField()\n    telephone = models.CharField(max_length=20)\n    instrument = models.ForeignKey(Instrument, on_delete=models.CASCADE)\n    nombre_de_places = models.PositiveIntegerField()\n    montant = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return f\"Réservation de {self.nom} {self.prenom} pour {self.instrument}\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "update_hostname",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def update_hostname(sender, instance, created, **kwargs):\n    if created:\n        try:\n            instance.hostname = socket.gethostname()\n            instance.save()\n        except socket.error as e:\n            print(f\"Erreur lors de la récupération du hostname: {e}\")\n@receiver(user_logged_in, sender=User)\ndef update_last_login(sender, user, **kwargs):\n    user.last_login_date = timezone.now()",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "update_last_login",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def update_last_login(sender, user, **kwargs):\n    user.last_login_date = timezone.now()\n    user.save()\n@receiver(pre_save, sender=User)\ndef update_last_modify(sender, instance, **kwargs):\n    instance.last_modify_date = timezone.now()\n@receiver(post_save, sender=User)\ndef update_deactivate_date(sender, instance, **kwargs):\n    if not instance.is_active and instance.deactivate_date is None:\n        instance.deactivate_date = timezone.now()",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "update_last_modify",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def update_last_modify(sender, instance, **kwargs):\n    instance.last_modify_date = timezone.now()\n@receiver(post_save, sender=User)\ndef update_deactivate_date(sender, instance, **kwargs):\n    if not instance.is_active and instance.deactivate_date is None:\n        instance.deactivate_date = timezone.now()\n        instance.save()\nclass Artistes(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='artiste_user')\n    nom = models.CharField(max_length=100)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "update_deactivate_date",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def update_deactivate_date(sender, instance, **kwargs):\n    if not instance.is_active and instance.deactivate_date is None:\n        instance.deactivate_date = timezone.now()\n        instance.save()\nclass Artistes(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='artiste_user')\n    nom = models.CharField(max_length=100)\n    biographie = models.TextField()\n    image = models.ImageField(upload_to='artistes/', null=True, blank=True)\n    def __str__(self):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "update_price",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def update_price(sender, instance, **kwargs):\n    if instance.is_gratuit:\n        instance.prix = None\nclass CodeQR(models.Model):\n    spectacle = models.OneToOneField(Spectacle, on_delete=models.CASCADE, related_name='code_qr')\n    code_qr = models.ImageField(upload_to='codes_qr/', null=True, blank=True)\n    token = models.CharField(max_length=32, unique=True)\n    code_secret = models.CharField(max_length=6, unique=True)\n    device_info = models.CharField(max_length=255, null=True, blank=True)\n    is_used = models.BooleanField(default=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "RegisterUserSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class RegisterUserSerializer(serializers.ModelSerializer):\n    email_or_phone = serializers.CharField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password], style={'input_type':'password'})\n    first_name = serializers.CharField(required=True)\n    last_name = serializers.CharField(required=True)\n    class Meta:\n        model = User",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ArtistesSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ArtistesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Artistes\n        fields = '__all__'\nclass CentreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Centre\n        fields = '__all__'\nclass ArtisteInviteSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "CentreSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class CentreSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Centre\n        fields = '__all__'\nclass ArtisteInviteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ArtisteInvite\n        fields = '__all__'\nclass CategorieArtisteSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ArtisteInviteSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ArtisteInviteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ArtisteInvite\n        fields = '__all__'\nclass CategorieArtisteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CategorieArtiste\n        fields = '__all__'\nclass TypeDiffusionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "CategorieArtisteSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class CategorieArtisteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CategorieArtiste\n        fields = '__all__'\nclass TypeDiffusionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeDiffusion\n        fields = '__all__'\nclass TypeSpectacleSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "TypeDiffusionSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class TypeDiffusionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeDiffusion\n        fields = '__all__'\nclass TypeSpectacleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeSpectacle\n        fields = '__all__'\nclass SpectacleSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "TypeSpectacleSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class TypeSpectacleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeSpectacle\n        fields = '__all__'\nclass SpectacleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Spectacle\n        fields = '__all__'\nclass CodeQRSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "SpectacleSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class SpectacleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Spectacle\n        fields = '__all__'\nclass CodeQRSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CodeQR\n        fields = '__all__'\nclass ReservationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "CodeQRSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class CodeQRSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CodeQR\n        fields = '__all__'\nclass ReservationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reservation\n        fields = '__all__'\nclass TypeInstrumentSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ReservationSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ReservationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reservation\n        fields = '__all__'\nclass TypeInstrumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeInstrument\n        fields = '__all__'\nclass InstrumentSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "TypeInstrumentSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class TypeInstrumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypeInstrument\n        fields = '__all__'\nclass InstrumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Instrument\n        fields = '__all__'\nclass NomFormationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "InstrumentSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class InstrumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Instrument\n        fields = '__all__'\nclass NomFormationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NomFormation\n        fields = '__all__'\nclass ServiceSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "NomFormationSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class NomFormationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NomFormation\n        fields = '__all__'\nclass ServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Service\n        fields = '__all__'\nclass TypePaiementSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Service\n        fields = '__all__'\nclass TypePaiementSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypePaiement\n        fields = '__all__'\nclass ReserverServiceSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "TypePaiementSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class TypePaiementSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TypePaiement\n        fields = '__all__'\nclass ReserverServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReserverService\n        fields = '__all__'\nclass RestaurationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ReserverServiceSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ReserverServiceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReserverService\n        fields = '__all__'\nclass RestaurationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Restauration\n        fields = '__all__'\nclass ComanderMenuSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "RestaurationSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class RestaurationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Restauration\n        fields = '__all__'\nclass ComanderMenuSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ComanderMenu\n        fields = '__all__'\n# class PaymentSerializer(serializers.ModelSerializer):\n#     class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ComanderMenuSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ComanderMenuSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ComanderMenu\n        fields = '__all__'\n# class PaymentSerializer(serializers.ModelSerializer):\n#     class Meta:\n#         model = Payment\n#         fields = '__all__'\nclass ReserverFormationSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "ReserverFormationSerializer",
        "kind": 6,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "class ReserverFormationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ReserverFormation\n        fields = '__all__'",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "app.serializers",
        "description": "app.serializers",
        "peekOfCode": "User = get_user_model()\nclass RegisterUserSerializer(serializers.ModelSerializer):\n    email_or_phone = serializers.CharField(\n        required=True,\n        validators=[UniqueValidator(queryset=User.objects.all())]\n    )\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password], style={'input_type':'password'})\n    first_name = serializers.CharField(required=True)\n    last_name = serializers.CharField(required=True)\n    class Meta:",
        "detail": "app.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.urls",
        "description": "app.urls",
        "peekOfCode": "urlpatterns = [\n\tpath('register/', RegisterUserView.as_view(), name='register'),\n    path('api/delete-user/<int:user_id>/', delete_user, name='delete_user'),\n\tpath('login/', login_view, name='login'),\n\tpath('reset_password_email/', reset_password_email, name='reset_password_email'),\n\tpath('reset_password_confirm/<str:uidb64>/<str:token>', reset_password_confirm, name='reset_password_confirm'),\n    path('artistes/', ArtistesListView.as_view(), name='artistes-list'),    \n    path('regenerate-qr-codes/', views.regenerate_qr_codes, name='regenerate_qr_codes'),\n    path('codeqr/', views.CodeQRListCreateAPIView.as_view(), name='codeqr-list-create'),\n    path('codeqr/<int:pk>/', views.CodeQRRetrieveUpdateDestroyAPIView.as_view(), name='codeqr-retrieve-update-destroy'),",
        "detail": "app.urls",
        "documentation": {}
    },
    {
        "label": "RegisterUserView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class RegisterUserView(CreateAPIView):\n    queryset = get_user_model().objects.all()\n    permission_classes = (AllowAny,)\n    serializer_class = RegisterUserSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()\n        self.send_registration_email(user)\n    def send_registration_email(self, user):\n        subject = 'Bienvenue sur AfricaSoundCity'\n        html_message = render_to_string('authentication/registration_email.html', {'user': user})",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "RendreArtisteView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class RendreArtisteView(APIView):\n    def post(self, request, user_id):\n        # Récupérez les données soumises par l'utilisateur\n        serializer = ArtistesSerializer(data=request.data)\n        if serializer.is_valid():\n            # Créez une instance du modèle Artistes\n            artiste = serializer.save(user_id=user_id)\n            # Mettez à jour l'utilisateur pour le marquer comme artiste\n            user = User.objects.get(pk=user_id)\n            user.is_artistes = True",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "ArtistesListView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class ArtistesListView(APIView):\n    def get(self, request):\n        artistes = Artistes.objects.all()  # Récupère tous les artistes\n        serializer = ArtistesSerializer(artistes, many=True)  # Sérialise la liste des artistes\n        return Response(serializer.data, status=status.HTTP_200_OK)\nclass CodeQRListCreateAPIView(generics.ListCreateAPIView):\n    queryset = CodeQR.objects.all()\n    serializer_class = CodeQRSerializer\nclass CodeQRRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = CodeQR.objects.all()",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "CodeQRListCreateAPIView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class CodeQRListCreateAPIView(generics.ListCreateAPIView):\n    queryset = CodeQR.objects.all()\n    serializer_class = CodeQRSerializer\nclass CodeQRRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = CodeQR.objects.all()\n    serializer_class = CodeQRSerializer\nclass GenererCodeQRView(generics.CreateAPIView):\n    queryset = Spectacle.objects.all()\n    serializer_class = SpectacleSerializer\n    def post(self, request, *args, **kwargs):",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "CodeQRRetrieveUpdateDestroyAPIView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class CodeQRRetrieveUpdateDestroyAPIView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = CodeQR.objects.all()\n    serializer_class = CodeQRSerializer\nclass GenererCodeQRView(generics.CreateAPIView):\n    queryset = Spectacle.objects.all()\n    serializer_class = SpectacleSerializer\n    def post(self, request, *args, **kwargs):\n        spectacle = self.get_object()\n        code_qr = spectacle.generer_code_qr()\n        serializer = CodeQRSerializer(code_qr)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "GenererCodeQRView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class GenererCodeQRView(generics.CreateAPIView):\n    queryset = Spectacle.objects.all()\n    serializer_class = SpectacleSerializer\n    def post(self, request, *args, **kwargs):\n        spectacle = self.get_object()\n        code_qr = spectacle.generer_code_qr()\n        serializer = CodeQRSerializer(code_qr)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    def delete(self, request, *args, **kwargs):\n        spectacle = self.get_object()",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "ShowsListView",
        "kind": 6,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "class ShowsListView(ListView):\n    template_name = 'control_user/pages/shows.html'\n    context_object_name = 'spectacles'\n    def get_queryset(self):\n        # Récupérer la liste des spectacles via la fonction utilitaire\n        spectacles = manage_spectacles(action='list')\n        if not isinstance(spectacles, list):\n            spectacles = []  # Gestion d'erreur si la fonction utilitaire retourne un message d'erreur\n        type_spectacle_id = self.kwargs.get('type_spectacle_id')\n        queryset = []",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "delete_user",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def delete_user(request, user_id):\n    try:\n        user = get_user_model().objects.get(pk=user_id)\n        user.delete()\n        return Response({'message': f'User with ID {user_id} has been deleted successfully.'}, status=status.HTTP_204_NO_CONTENT)\n    except get_user_model().DoesNotExist:\n        return Response({'message': f'User with ID {user_id} does not exist.'}, status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:\n        return Response({'message': f'An error occurred: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n@api_view(['GET', 'POST'])",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        email_or_phone = request.data.get('email_or_phone')\n        password = request.data.get('password')\n        user = authenticate(request, email_or_phone=email_or_phone, password=password)\n        if user is not None:\n            login(request, user)\n            if user.is_superuser or user.is_staff:\n                return JsonResponse({'message': 'Authentification réussie.', 'redirect_url': '/administration/'})\n            else:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "reset_password_email",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def reset_password_email(request):\n    if request.method == 'POST':\n        email = request.data.get('email')\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:\n            return Response({'message': 'Utilisateur non trouvé.'}, status=status.HTTP_404_NOT_FOUND)\n        token = default_token_generator.make_token(user)\n        uri = urlsafe_base64_encode(force_bytes(user.pk))\n        # Construire l'URL complète",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "reset_password_confirm",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def reset_password_confirm(request, uidb64, token):\n    try:\n        uid = force_str(urlsafe_base64_decode(uidb64))\n        user = get_user_model().objects.get(pk=uid)\n    except (TypeError, ValueError, OverflowError, get_user_model().DoesNotExist):\n        user = None\n    if user is not None and default_token_generator.check_token(user, token):\n        if request.method == 'POST':\n            form = SetPasswordForm(user, request.POST)\n            if form.is_valid():",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "regenerate_qr_codes",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def regenerate_qr_codes(request):\n    CodeQR.objects.all().delete()\n    for spectacle in Spectacle.objects.all():\n        spectacle.generer_code_qr()\n    return HttpResponse(\"Codes QR régénérés avec succès.\")\n###################    La vue des pages    ###################\ndef change_language(request, language):\n    activate(language_code)\n    if language:\n        translation.activate(language)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "change_language",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def change_language(request, language):\n    activate(language_code)\n    if language:\n        translation.activate(language)\n        response = HttpResponseRedirect(request.META.get('HTTP_REFERER'))\n        response.set_cookie(settings.LANGUAGE_COOKIE_NAME, language)\n        return response\n    else:\n        return HttpResponseRedirect(request.META.get('HTTP_REFERER'))\ndef countdown(request):",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def countdown(request):\n    # Récupérer la prochaine date de concert à partir de la base de données\n    prochain_evenement = ProchainConcert.objects.select_related('spectacle').first()\n    return render(request, 'countdown.html', {'prochain_evenement': prochain_evenement,})\ndef home(request):\n    spectacles = manage_spectacles(action='list')\n    centres = manage_centres(action='list')\n    prochain_evenement = ProchainConcert.objects.first()\n    prochainconcert = ProchainConcert.objects.all()\n    # carrousel = ProchainConcert.objects.first()",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def home(request):\n    spectacles = manage_spectacles(action='list')\n    centres = manage_centres(action='list')\n    prochain_evenement = ProchainConcert.objects.first()\n    prochainconcert = ProchainConcert.objects.all()\n    # carrousel = ProchainConcert.objects.first()\n    carrousels = Carrousel.objects.all()\n    context = {\n        'spectacles': spectacles,\n        'centres': centres,",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "streamings",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def streamings(request):\n    spectacles = manage_spectacles(action='list')\n    return render(request, 'control_user/pages/streamings.html', {'spectacles': spectacles})\n@login_required\ndef access_streaming(request, spectacle_id):\n    spectacle = get_object_or_404(Spectacle, pk=spectacle_id)\n    device_info = request.META['HTTP_USER_AGENT']  # Utiliser le user agent comme information sur l'appareil\n    if request.method == 'POST':\n        code_input = ''.join([\n            request.POST.get(f'code_digit_{i}', '') for i in range(1, 7)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "access_streaming",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def access_streaming(request, spectacle_id):\n    spectacle = get_object_or_404(Spectacle, pk=spectacle_id)\n    device_info = request.META['HTTP_USER_AGENT']  # Utiliser le user agent comme information sur l'appareil\n    if request.method == 'POST':\n        code_input = ''.join([\n            request.POST.get(f'code_digit_{i}', '') for i in range(1, 7)\n        ])\n        try:\n            code_qr = CodeQR.objects.get(spectacle=spectacle, code_secret=code_input)\n            if code_qr.is_used:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "create_kkiapay_session",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def create_kkiapay_session(request, spectacle_id):\n    spectacle = Spectacle.objects.get(id=spectacle_id)\n    quantity = int(request.GET.get('quantity', 1))\n    total_amount = int(spectacle.prix * quantity * 100)\n    redirect_url = f\"https://kkiapay.me/api/paymentlink?amount={total_amount}&apikey={settings.KKIAPAY_API_KEY}&custom_data[spectacle_id]={spectacle.id}&custom_data[quantity]={quantity}&callback_url={request.build_absolute_uri('/webhook/kkiapay/')}\"\n    return redirect(redirect_url)\ndef envoyer_codes_secrets_par_email(email, tickets_codes, spectacle):\n    if len(tickets_codes) == 1:\n        sujet = 'Votre code secret pour le streaming payant'\n    else:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "envoyer_codes_secrets_par_email",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def envoyer_codes_secrets_par_email(email, tickets_codes, spectacle):\n    if len(tickets_codes) == 1:\n        sujet = 'Votre code secret pour le streaming payant'\n    else:\n        sujet = 'Vos codes secrets pour le streaming payant'\n    message = render_to_string('control_user/pages/codes_secrets_email.html', {\n        'tickets_codes': tickets_codes,\n        'spectacle': spectacle,\n        'single_ticket': len(tickets_codes) == 1\n    })",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "kkiapay_webhook",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def kkiapay_webhook(request):\n    import json\n    payload = json.loads(request.body)\n    if payload['status'] == 'SUCCESS':\n        customer_email = payload.get('customer_email')\n        spectacle_id = payload.get('custom_data', {}).get('spectacle_id')\n        quantity = int(payload.get('custom_data', {}).get('quantity', 1))\n        montant_total = payload.get('amount')\n        transaction_id = payload.get('transaction_id')\n        if customer_email and spectacle_id:",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def service(request):\n    formations = manage_nom_formations(action='list')\n    return render(request, 'control_user/pages/service.html', {'formations': formations})\ndef reservet(request):\n    instrument = request.GET.get('instrument', '')\n    prix = request.GET.get('prix', '')\n    context = {\n        'formation': {'type_instrument': instrument},\n        'prix': prix\n    }",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "reservet",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def reservet(request):\n    instrument = request.GET.get('instrument', '')\n    prix = request.GET.get('prix', '')\n    context = {\n        'formation': {'type_instrument': instrument},\n        'prix': prix\n    }\n    return render(request, 'control_user/pages/reservet.html', context)\n@csrf_exempt\ndef kkiapay_callback(request):",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "kkiapay_callback",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def kkiapay_callback(request):\n    if request.method == 'POST':\n        transaction_id = request.POST.get('transaction_id')\n        amount = request.POST.get('amount')\n        nom = request.POST.get('last_name')\n        prenom = request.POST.get('first_name')\n        email = request.POST.get('email')\n        telephone = request.POST.get('telephone')\n        instrument_id = request.POST.get('instrument')\n        nombre_places = request.POST.get('nombrePlaces')",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "commander",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def commander(request):\n    return render(request, 'control_user/pages/commander.html')\ndef ticketdetails(request, spectacle_id):\n    spectacle = manage_spectacles(action='retrieve', instance_id=spectacle_id)\n    return render(\n        request, \n        'control_user/pages/ticketdetails.html', \n        {\n            'spectacle': spectacle, \n            'kkiapay_api_key': 'kkiapay_api_key', ",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "ticketdetails",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def ticketdetails(request, spectacle_id):\n    spectacle = manage_spectacles(action='retrieve', instance_id=spectacle_id)\n    return render(\n        request, \n        'control_user/pages/ticketdetails.html', \n        {\n            'spectacle': spectacle, \n            'kkiapay_api_key': 'kkiapay_api_key', \n            'kkiapay_callback_url': 'kkiapay_callback_url'\n        }",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "restaurant",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def restaurant(request):\n    restaurants = manage_restauration(action='list')\n    return render(request, 'control_user/pages/restaurant.html', {'restaurants': restaurants})\ndef page_register(request):\n    return render(request, 'authentication/authentication-register.html')\ndef page_login(request):\n\treturn render(request, 'authentication/authentication-login.html')\ndef page_password_email(request):\n\treturn render(request, 'authentication/reset_password_email.html')",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "page_register",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def page_register(request):\n    return render(request, 'authentication/authentication-register.html')\ndef page_login(request):\n\treturn render(request, 'authentication/authentication-login.html')\ndef page_password_email(request):\n\treturn render(request, 'authentication/reset_password_email.html')",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "page_login",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def page_login(request):\n\treturn render(request, 'authentication/authentication-login.html')\ndef page_password_email(request):\n\treturn render(request, 'authentication/reset_password_email.html')",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "page_password_email",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def page_password_email(request):\n\treturn render(request, 'authentication/reset_password_email.html')",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "User = get_user_model()\nclass RegisterUserView(CreateAPIView):\n    queryset = get_user_model().objects.all()\n    permission_classes = (AllowAny,)\n    serializer_class = RegisterUserSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()\n        self.send_registration_email(user)\n    def send_registration_email(self, user):\n        subject = 'Bienvenue sur AfricaSoundCity'",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'AfricaShows.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]